// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	reflect "reflect"
	call "test_trigger/internal/call"

	gomock "github.com/golang/mock/gomock"
)

// MockCallSaver is a mock of CallSaver interface.
type MockCallSaver struct {
	ctrl     *gomock.Controller
	recorder *MockCallSaverMockRecorder
}

// MockCallSaverMockRecorder is the mock recorder for MockCallSaver.
type MockCallSaverMockRecorder struct {
	mock *MockCallSaver
}

// NewMockCallSaver creates a new mock instance.
func NewMockCallSaver(ctrl *gomock.Controller) *MockCallSaver {
	mock := &MockCallSaver{ctrl: ctrl}
	mock.recorder = &MockCallSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCallSaver) EXPECT() *MockCallSaverMockRecorder {
	return m.recorder
}

// AddToQueueBack mocks base method.
func (m *MockCallSaver) AddToQueueBack(arg0 context.Context, meta call.Meta) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToQueueBack", arg0, meta)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToQueueBack indicates an expected call of AddToQueueBack.
func (mr *MockCallSaverMockRecorder) AddToQueueBack(arg0, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToQueueBack", reflect.TypeOf((*MockCallSaver)(nil).AddToQueueBack), arg0, meta)
}
