// Code generated by MockGen. DO NOT EDIT.
// Source: creator.go

// Package worker is a generated GoMock package.
package worker

import (
	context "context"
	reflect "reflect"
	sync "sync"

	gomock "github.com/golang/mock/gomock"
)

// MockWorker is a mock of Worker interface.
type MockWorker struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerMockRecorder
}

// MockWorkerMockRecorder is the mock recorder for MockWorker.
type MockWorkerMockRecorder struct {
	mock *MockWorker
}

// NewMockWorker creates a new mock instance.
func NewMockWorker(ctrl *gomock.Controller) *MockWorker {
	mock := &MockWorker{ctrl: ctrl}
	mock.recorder = &MockWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorker) EXPECT() *MockWorkerMockRecorder {
	return m.recorder
}

// ProcessCalls mocks base method.
func (m *MockWorker) ProcessCalls(ctx context.Context, wg *sync.WaitGroup) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessCalls", ctx, wg)
}

// ProcessCalls indicates an expected call of ProcessCalls.
func (mr *MockWorkerMockRecorder) ProcessCalls(ctx, wg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessCalls", reflect.TypeOf((*MockWorker)(nil).ProcessCalls), ctx, wg)
}
